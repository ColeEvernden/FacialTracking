import cv2
import serial
import time

# Open the serial connection to the Arduino
arduino = serial.Serial('COM9', 9600)

# Initialize the camera
cap = cv2.VideoCapture(1)

# Load the cascade
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Initialize the servo angles
pan_angle = 90
tilt_angle = 65

# Define the servo increment/decrement values
pan_increment = 2
tilt_increment = 2

while True:
    # Read a frame from the camera
    ret, img = cap.read()

    # Convert the image to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Detect faces in the image
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    # Draw a rectangle around each face
    for (x, y, w, h) in faces:
        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)

        # Calculate the center of the face
        center_x = x + w/2
        center_y = y + h/2

        # Calculate the difference between the center of the face and the center of the frame
        x_diff = center_x - img.shape[1]/2
        y_diff = center_y - img.shape[0]/2

        # Adjust the servo angles based on the position of the face
        if x_diff > 10:
            pan_angle += pan_increment
        elif x_diff < -10:
            pan_angle -= pan_increment

        if y_diff > 10:
            tilt_angle -= tilt_increment
        elif y_diff < -10:
            tilt_angle += tilt_increment

        # Limit the tilt angle
        tilt_angle = max(30, min(100, tilt_angle))

    # Send the angles to the Arduino
    arduino.write(f'{pan_angle},{tilt_angle}'.encode())

    # Display the image
    cv2.imshow('img', img)

    # Check for the 'q' key to exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close the serial connection
cap.release()
arduino.close()
cv2.destroyAllWindows()
